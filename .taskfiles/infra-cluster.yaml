---
# yaml-language-server: $schema=https://taskfile.dev/schema.json
version: '3'

env:
  INFRA_CLUSTER_NODES:
    # for god knows what reason, this doesn't work if the expression
    # is the same as that used for the home cluster
    sh: |-
      cat $(git ls-files | grep talconfig.yaml) | grep -oP 'ipAddress\: \K[0-9.]+'

includes:
  # TODO: replace with sopshelper
  sops:
    internal: true
    taskfile: ./sops.yaml

tasks:
  cluster:create:
    desc: Bootstrap the application cluster end to end.
    deps: [ sops:decrypt ]
    cmds:
      # Generate and apply Talos config
      - talhelper genconfig > /dev/null
      - talhelper gencommand apply --extra-flags=--insecure | bash

      # Import talosconfig
      - rm -f ~/.talos/config
      - cp clusterconfig/talosconfig ~/.talos/config
      - talosctl config nodes {{(split " " .INFRA_CLUSTER_NODES)._0}}

      # Wait for Talos to become ready
      - for: { var: INFRA_CLUSTER_NODES }
        cmd: NODE_IP={{.ITEM}} bash {{.ROOT_DIR}}/scripts/talos-wait-node-kubelet-healthy.sh

      # Bootstrap Kubernetes and import kubeconfig
      - talhelper gencommand bootstrap | bash
      - talosctl kubeconfig --force

      # Wait for Kubernetes to become Ready
      - bash {{.ROOT_DIR}}/scripts/kubernetes-wait-api.sh
      - for: { var: INFRA_CLUSTER_NODES }
        cmd: NODE_IP={{.ITEM}} NODE_ROLE="control-plane" bash {{.ROOT_DIR}}/scripts/kubernetes-wait-node-joined.sh

      # Bootstrap FluxCD
      - kubectl apply -k integrations/flux
      - kubectl apply -k integrations/flux-manifests
      - cat $SOPS_AGE_KEY_FILE | kubectl create secret generic sops-age --namespace=flux-system --from-file=age.agekey=/dev/stdin

  cluster:select:
    desc: This will set the currently active cluster.
    deps: [ sops:decrypt ]
    cmds:
      - talhelper genconfig --no-gitignore > /dev/null
      - rm -f ~/.talos/config && cp clusterconfig/talosconfig ~/.talos/config
      - rm -f ~/.kube/config && talosctl -n {{(split " " .INFRA_CLUSTER_NODES)._0}} kubeconfig

  cluster:reset:
    desc: Reset all of the talos nodes.
    prompt: This will destroy the cluster. Are you sure you want to continue?
    deps: [ cluster:select ]
    cmds:
      - for: { var: INFRA_CLUSTER_NODES }
        cmd: talosctl reset --reboot --graceful=false --wipe-mode=all --wait=false -n {{.ITEM}}

  cluster:reboot:
    desc: Reboot all Talos nodes.
    prompt: This will reboot all of the cluster nodes. Are you sure you want to continue?
    deps: [ cluster:select ]
    cmds:
      - for: { var: INFRA_CLUSTER_NODES }
        cmd: talosctl reboot -n {{.ITEM}}

  cluster:shutdown:
    desc: Shutdown all Talos nodes.
    prompt: This will shutdown all of the cluster nodes. Are you sure you want to continue?
    deps: [ cluster:select ]
    cmds:
      - for: { var: INFRA_CLUSTER_NODES }
        cmd: talosctl shutdown --wait=false -n {{.ITEM}}
