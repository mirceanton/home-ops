---
- name: Validate Firewall Rules
  hosts: all
  gather_facts: false

  tasks:
    - name: Ensure required packages are present
      become: true
      ansible.builtin.apt:
        name:
          - netcat-openbsd
          - dnsutils
        state: latest
        update_cache: true
        cache_valid_time: 3600


    - name: Test gateway is protected
      ansible.builtin.shell: "nc -z -w3 {{ item.host }} {{ item.port }}; echo $?"
      ignore_errors: true
      changed_when: false
      register: __nc_results
      failed_when: __nc_results.stdout != item.expected | ternary('0', '1')
      loop:
        - { host: "{{ gateway_ip }}", port: 21, expected: false }   # FTP
        - { host: "{{ gateway_ip }}", port: 22, expected: false }   # SSH
        - { host: "{{ gateway_ip }}", port: 23, expected: false }   # Telnet
        - { host: "{{ gateway_ip }}", port: 53, expected: true }    # DNS
        - { host: "{{ gateway_ip }}", port: 80, expected: false }   # HTTP
        - { host: "{{ gateway_ip }}", port: 443, expected: true }   # HTTPS
        - { host: "{{ gateway_ip }}", port: 8291, expected: true }  # WINBOX
        - { host: "{{ gateway_ip }}", port: 8728, expected: false } # API
        - { host: "{{ gateway_ip }}", port: 8729, expected: true }  # API SSL
      loop_control:
        label: "host={{ item.host }} | port={{ item.port }}"


    - name: Test node can ping its gateway
      ansible.builtin.shell: "ping -c 1 -w 2 {{ gateway_ip }}"
      ignore_errors: true
      changed_when: false


    - name: Test public DNS resolution and access to the internet
      ansible.builtin.shell: "ping -c 1 -w 2 {{ item }} > /dev/null; echo $?;"
      ignore_errors: true
      changed_when: false
      register: __ping_results
      failed_when: access_to_internet|ternary('0','1') != __ping_results.stdout
      loop: [ "mirceanton.com", "google.com" ]


    - name: Test internal DNS and access to the LAN network
      ignore_errors: true
      changed_when: false
      ansible.builtin.shell: "ping -c 1 -w 2 {{ item }} > /dev/null; echo $?"
      register: __ping_results
      failed_when: access_to_lan|ternary('0','1') != __ping_results.stdout
      loop: [ "homebase.home.mirceanton.com", "homeassistant.home.mirceanton.com" ]


    - name: Test internal DNS and access to the Management network
      ignore_errors: true
      changed_when: false
      ansible.builtin.shell: "ping -c 1 -w 2 {{ item }} > /dev/null; echo $?"
      register: __ping_results
      failed_when: access_to_mgmt|ternary('0','1') != __ping_results.stdout
      loop: [ "homebase.mgmt.mirceanton.com", "cisco-sg350.mgmt.mirceanton.com" ]
