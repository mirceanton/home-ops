---
# yaml-language-server: $schema=https://kubernetes-schemas.devbu.io/helm.toolkit.fluxcd.io/helmrelease_v2beta1.json
apiVersion: helm.toolkit.fluxcd.io/v2beta1
kind: HelmRelease
metadata:
  name: ingress-nginx
spec:
  chart:
    spec:
      chart: ingress-nginx
      version: 4.8.0
      sourceRef:
        kind: HelmRepository
        name: ingress-nginx

  values:
    imagePullSecrets: []

    ## ================================================================================================
    ## CONTROLLER DEPLOYMENT PARAMTERS
    ## ================================================================================================
    controller:
      kind: Deployment
      replicaCount: 2
      minAvailable: 1

      image:
        registry: registry.k8s.io
        image: ingress-nginx/controller
        pullPolicy: IfNotPresent
        # tag: "v1.9.3"
        # digest: sha256:8fd21d59428507671ce0fb47f818b1d859c92d2ad07bb7c947268d433030ba98
        runAsUser: 101  # www-data -> uid 101
        allowPrivilegeEscalation: true

      # -- For backwards compatibility with ingress.class annotation, use ingressClass.
      ingressClass: nginx
      ingressClassResource:
        name: nginx
        enabled: true
        default: true

      # -- The update strategy to apply to the Deployment or DaemonSet
      updateStrategy: 
      type: RollingUpdate
      rollingUpdate:
        maxUnavailable: 1

      # -- Node labels for controller pod assignment
      nodeSelector:
        kubernetes.io/os: linux

      # -- Affinity and anti-affinity rules for server scheduling to nodes
      affinity: {}

      # -- Node tolerations for server scheduling to nodes with taints
      tolerations: []

      # -- Topology spread constraints rely on node labels to identify the topology domain(s) that each Node is in.
      topologySpreadConstraints:
        - maxSkew: 1
          topologyKey: kubernetes.io/hostname
          whenUnsatisfiable: DoNotSchedule
          labelSelector:
            matchLabels:
              app.kubernetes.io/instance: ingress-nginx

      ## Define requests resources to avoid probe issues due to CPU utilization in busy nodes
      resources:
        limits:
          cpu: 200m
          memory: 200Mi
        requests:
          cpu: 100m
          memory: 100Mi

      service:
        enabled: true
        enableHttp: true
        enableHttps: true
        ipFamilyPolicy: "SingleStack"
        ports:
          http: 80
          https: 443
        targetPorts:
          http: http
          https: https
        type: LoadBalancer
        external:
          enabled: true
        internal:
          enabled: false

      admissionWebhooks:
        enabled: true

      ## ================================================================================================
      ## MONITORING
      ## ================================================================================================
      opentelemetry:
        enabled: false
      metrics:
        enabled: true
        port: 10254
        portName: metrics
        # if this port is changed, change healthz-port: in extraArgs: accordingly
        service:
          annotations:
            prometheus.io/scrape: "true"
            prometheus.io/port: "10254"

        serviceMonitor:
          enabled: true
          jobLabel: "app.kubernetes.io/name"
          scrapeInterval: 30s
          honorLabels: true
          targetLabels: []
          relabelings: []
          metricRelabelings: []

        prometheusRule:
          enabled: true
          rules:
          - alert: NGINXConfigFailed
            expr: count(nginx_ingress_controller_config_last_reload_successful == 0) > 0
            for: 1s
            labels:
              severity: critical
            annotations:
              description: bad ingress config - nginx config test failed
              summary: uninstall the latest ingress changes to allow config reloads to resume

          - alert: NGINXCertificateExpiry
            expr: (avg(nginx_ingress_controller_ssl_expire_time_seconds) by (host) - time()) < 604800
            for: 1s
            labels:
              severity: critical
            annotations:
              description: ssl certificate(s) will expire in less then a week
              summary: renew expiring certificates to avoid downtime

          - alert: NGINXTooMany500s
            expr: 100 * ( sum( nginx_ingress_controller_requests{status=~"5.+"} ) / sum(nginx_ingress_controller_requests) ) > 5
            for: 1m
            labels:
              severity: warning
            annotations:
              description: Too many 5XXs
              summary: More than 5% of all requests returned 5XX, this requires your attention

          - alert: NGINXTooMany400s
            expr: 100 * ( sum( nginx_ingress_controller_requests{status=~"4.+"} ) / sum(nginx_ingress_controller_requests) ) > 5
            for: 1m
            labels:
              severity: warning
            annotations:
              description: Too many 4XXs
              summary: More than 5% of all requests returned 4XX, this requires your attention

    rbac:
      create: true
      scope: false
    serviceAccount:
      create: true
    podSecurityPolicy:
      enabled: false
