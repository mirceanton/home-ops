---
version: '3'

env:
  SOPS_AGE_KEY_FILE: /home/mike/.config/sops/age/keys.txt
  EDITOR: code --wait

includes:
# =================================================================================================
# TOOLING
# =================================================================================================
  ansible:
    taskfile: ansible/.taskfile.yaml
    dir: ansible/

tasks:
# =================================================================================================
# MANAGEMENT CLUSTER - SOPS
# =================================================================================================
  mkc:sops:encrypt:
    run: once
    cmds:
      - sops --encrypt infra/management-cluster/talos/base.yaml > infra/management-cluster/talos/base.sops.yaml
      - sops --encrypt infra/management-cluster/talos/secrets.yaml > infra/management-cluster/talos/secrets.sops.yaml
      - sops --encrypt infra/management-cluster/talos/talosconfig.yaml > infra/management-cluster/talos/talosconfig.sops.yaml
      - sops --encrypt clusters/management/core/github-actions-runner-controller/manifests/github-actions.secret.yaml > clusters/management/core/github-actions-runner-controller/manifests/github-actions.secret.sops.yaml

  mkc:sops:decrypt:
    run: once
    cmds:
      - sops --decrypt infra/management-cluster/talos/base.sops.yaml > infra/management-cluster/talos/base.yaml
      - sops --decrypt infra/management-cluster/talos/secrets.sops.yaml > infra/management-cluster/talos/secrets.yaml
      - sops --decrypt infra/management-cluster/talos/talosconfig.sops.yaml > infra/management-cluster/talos/talosconfig.yaml
      - sops --decrypt clusters/management/core/github-actions-runner-controller/manifests/github-actions.secret.sops.yaml > clusters/management/core/github-actions-runner-controller/manifests/github-actions.secret.yaml

  mkc:sops:edit:talosconfig:
    dir: infra/management-cluster
    cmds: [ sops talos/talosconfig.sops.yaml ]

  mkc:sops:edit:secrets:
    dir: infra/management-cluster
    cmds: [ sops talos/secrets.sops.yaml ]

  mkc:sops:edit:base:
    dir: infra/management-cluster
    cmds: [ sops talos/base.sops.yaml ]

# =================================================================================================
# MANAGEMENT CLUSTER - TALOS
# =================================================================================================
  mkc:talos:bootstrap:node:
    internal: true
    dir: infra/management-cluster/talos
    preconditions:
      - talosctl disks --nodes {{.NODE_IP}} --insecure > /dev/null
    cmds:
      - talosctl apply --nodes {{.NODE_IP}} --insecure --file base.yaml --config-patch @nodes/{{.NODE_NAME}}.yaml --config-patch @roles/{{.NODE_ROLE}}.yaml

  mkc:talos:bootstrap:
    dir: infra/management-cluster/talos
    deps: [ mkc:sops:decrypt ]
    cmds:
      - task: mkc:talos:bootstrap:node
        vars:
          NODE_IP: 10.0.10.11
          NODE_NAME: mkc-01
          NODE_ROLE: controlplane
      - task: mkc:talos:bootstrap:node
        vars:
          NODE_IP: 10.0.10.12
          NODE_NAME: mkc-02
          NODE_ROLE: controlplane
      - task: mkc:talos:bootstrap:node
        vars:
          NODE_IP: 10.0.10.13
          NODE_NAME: mkc-03
          NODE_ROLE: controlplane

  mkc:talos:wait:node:
    desc: Wait for a given node to be ready for kubernetes bootstrapping, after applying the talos config.
    internal: true
    silent: true
    cmds:
      - echo "Waiting for node {{.NODE_IP}} to be ready..."
      - while ! talosctl dmesg -n {{.NODE_IP}} 2> /dev/null | grep -q "etcd is waiting to join the cluster"; do sleep 1; done

  mkc:talos:wait:
    desk: After applying the bootstrap command, wait for the nodes to be ready.
    deps: [ mkc:talos:import:config ]
    cmds:
      - task: mkc:talos:wait:node
        vars:
          NODE_IP: 10.0.10.11
      - task: mkc:talos:wait:node
        vars:
          NODE_IP: 10.0.10.12
      - task: mkc:talos:wait:node
        vars:
          NODE_IP: 10.0.10.13

  mkc:talos:import:config:
    dir: infra/management-cluster
    run: once
    deps: [ mkc:sops:decrypt ]
    cmds: 
      - mkdir -p ~/.talos
      - sops --decrypt talos/talosconfig.sops.yaml > ~/.talos/config

# =================================================================================================
# MANAGEMENT CLUSTER - K8S
# =================================================================================================
  mkc:k8s:bootstrap:
    deps: [ mkc:talos:import:config ]
    cmds: [ talosctl bootstrap ]

  mkc:k8s:wait:endpoint:
    deps: [ mkc:k8s:import:config ]
    silent: true
    internal: true
    cmds:
      - echo "Waiting for the Kubernetes Endpoint to be Ready..."
      - while ! kubectl get pods 2> /dev/null; do sleep 1; done

  mkc:k8s:wait:nodes:
    deps: [ mkc:k8s:import:config ]
    silent: true
    cmds:
      - echo "Waiting for the Kubernetes Nodes to be Ready..."
      - while ! kubectl wait --for=condition=Ready nodes --all --timeout 10m 2> /dev/null; do sleep 1; done

  mkc:k8s:wait:kube-service:
    deps: [ mkc:k8s:import:config ]
    silent: true
    cmds:
      - echo "Waiting for service to be ready - {{.SERVICE}}..."
      - while [ "$(kubectl get pods -n kube-system | grep -c "{{.SERVICE}}")" -ne {{.REPLICAS | default 3}} ]; do sleep 1; done

  mkc:k8s:wait:
    deps: [ mkc:k8s:import:config ]
    silent: true
    cmds:
      - task: mkc:k8s:wait:endpoint
      - task: mkc:k8s:wait:nodes
      - task: mkc:k8s:wait:kube-service
        vars:
          SERVICE: kube-apiserver
      - task: mkc:k8s:wait:kube-service
        vars:
          SERVICE: kube-controller-manager
      - task: mkc:k8s:wait:kube-service
        vars:
          SERVICE: kube-proxy
      - task: mkc:k8s:wait:kube-service
        vars:
          SERVICE: kube-scheduler
      - task: mkc:k8s:wait:kube-service
        vars:
          SERVICE: coredns
          REPLICAS: 2
      - task: mkc:k8s:wait:kube-service
        vars:
          SERVICE: calico-node

  mkc:k8s:import:config:
    run: once
    deps: [ mkc:talos:import:config]
    cmds: [ talosctl kubeconfig --force ]

# =================================================================================================
# MANAGEMENT CLUSTER - FLUX CD
# =================================================================================================
  mkc:flux:bootstrap:
    deps: [ mkc:k8s:import:config ]
    preconditions:
      - test -f ~/.config/sops/age/keys.txt
    cmds:
      - flux bootstrap github --owner mirceanton --repository home-ops --branch main --path clusters/management/base --network-policy=false --timeout=15m --personal
      - kubectl -n flux-system create secret generic sops-age --from-file=age.agekey=/home/mike/.config/sops/age/keys.txt

  mkc:flux:wait:
    deps: [ mkc:k8s:import:config ]
    silent: true
    cmds:
      - echo "Waiting for Flux to synchronize all Kustomizations..."
      - while ! kubectl wait --for=condition=Ready kustomizations.kustomize.toolkit.fluxcd.io -A  --all --timeout 10m 2> /dev/null; do sleep 1; done

  mkc:flux:reconcile: flux reconcile source git flux-system

# =================================================================================================
# MANAGEMENT CLUSTER
# =================================================================================================
  mkc:bootstrap:
    cmds:
      - task: mkc:talos:bootstrap
      - task: mkc:talos:wait
      - task: mkc:k8s:bootstrap
      - task: mkc:k8s:wait
      - task: mkc:flux:bootstrap
      - task: mkc:flux:wait

# =================================================================================================
# PRODUCTION CLUSTER - SOPS
# =================================================================================================
  pkc:sops:encrypt:
    run: once
    cmds:
      - sops --encrypt infra/production-cluster/talos/base.yaml > infra/production-cluster/talos/base.sops.yaml
      - sops --encrypt infra/production-cluster/talos/secrets.yaml > infra/production-cluster/talos/secrets.sops.yaml
      - sops --encrypt infra/production-cluster/talos/talosconfig.yaml > infra/production-cluster/talos/talosconfig.sops.yaml

  pkc:sops:decrypt:
    run: once
    cmds:
      - sops --decrypt infra/production-cluster/talos/base.sops.yaml > infra/production-cluster/talos/base.yaml
      - sops --decrypt infra/production-cluster/talos/secrets.sops.yaml > infra/production-cluster/talos/secrets.yaml
      - sops --decrypt infra/production-cluster/talos/talosconfig.sops.yaml > infra/production-cluster/talos/talosconfig.yaml

  pkc:sops:edit:talosconfig:
    dir: infra/production-cluster
    cmds: [ sops talos/talosconfig.sops.yaml ]

  pkc:sops:edit:secrets:
    dir: infra/production-cluster
    cmds: [ sops talos/secrets.sops.yaml ]

  pkc:sops:edit:base:
    dir: infra/production-cluster
    cmds: [ sops talos/base.sops.yaml ]
